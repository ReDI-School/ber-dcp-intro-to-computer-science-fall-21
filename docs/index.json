[{"body":" Basics of operating system A brief history and potential of Linux Command Line Linux file system hierarchy Navigation of Linux file system Working with files: Create, View, Manipulate Creation of hard and soft links Using command options  Let\u0026#39;s learn the Command Line! üíª ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/command/","title":"1 - Operating systems \u0026 Command Line"},{"body":" Git terminology Working with a local repository on the command line Creating, initializing, and cloning a repository Basics of branching Staging and commiting work Setting up remote repository (GitHub) and pushing local commits  Let\u0026#39;s learn about Git! üíª ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/git/","title":"2 - Version Control with Git and GitHub"},{"body":"In this awesome course You will be learning fundamental computer science skills that are an absolute MUST for any IT field üéâ\nYou will be also introduced to programming and have your very first practical experience with one of the most popular programming languages: Python, HTML, CSS and Javascript.\nSections üìö These docs consists of four parts:\n Basic Command Line (Linux) Version Control with GIT Web Fundamentals Introduction to Programing (Python)  After this course ü§î  Understand and use the basic command line Use git/GitHub repository Understand the fundamentals of the web and its working Do basic python programming  After the successful completion of this introductory course, you can choose and apply for any other intermediate-level courses offered by ReDI!\nCourses links Basic Command Line Version Control with GIT Web Fundamentals Introduction to Programing (Python) ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/","title":"Welcome to the course üéâ"},{"body":"Pre Requisites 1. Install Git üíæ First! Check if you already have git installed, open your command line and run:\n1git --version If you see something like the following output then you already have git installed:\n1git version 2.x.x Otherwise, here are instructions to install Git:\n For Windows For MacOS  2. Sign up to GitHub üöÄ Sign up here: https://github.com/join\nWhy?\n We will use it in the class to store our code It can be used to collaborate with others It can be used to showcase your work  3. Watch the first 8:07 minutes of this video üìΩÔ∏è This Git and GitHub Tutorial For Beginners by Amigoscode.\nWhat you will learn:\n An overview of why Git and Github are so useful  You can watch the rest if you want, but for the purpose of the class, the first eight minutes are sufficient.\n4. Read this üìö Read this Introduction to Version Control and Git by CodeBar.\nWhat you will learn:\n What is version control? Why do we use it? Overview of Git as a version control system Overview of GitHub as a place to store code Common terminology   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Review Learnings from Preparatory Materials 15 minutes video + article   Lesson Goals 5-10 minutes ‚ùå   Make a local repository and first commits 10-15 minutes git   Create a GitHub repository and push commits 10-15 minutes git and github   Class break 10 minutes ‚ùå   Make a branch and open a pull request 15-20 minutes git and github   Fork and clone a GitHub repository 10-15 minutes git and github   Wrap-up and next class overview 10-15 minutes ‚ùå    Lesson Goal Use Git and GitHub to make a profile README for your GitHub account.\n1. Create a local repository First, create a new directory and give it the same name as your GitHub username (the reason for this will become clear later):\n1mkdir \u0026lt;github-username\u0026gt; Move into that directory\n1cd \u0026lt;github-username\u0026gt; Initialise an empty git repository with the branch name, main:\n1git init -b main Now you have an empty local repository üéâ\n2. Make a commit Next, we want to make changes within this repository and save (or commit!) them.\nA commit is a way to save changes you‚Äôve made to a repository. It is powerful because it allows you to keep snapshots of your repository at any given time.\nFirst, we create a new file:\n1touch README.md This is a README file using markdown syntax.\nNext, we will add some text to this file to say hello to the world.\n1echo \u0026#34;# Hello, my name is \u0026lt;your name\u0026gt; :)\u0026#34; \u0026gt; README.md Then view the status of the current git repository:\n1git status The README.md file will appear in the untracked files. We want to track this file and add it to the staging area so it will be included in the next commit:\n1git add . Then check the status again.\nLet's commit this file with a helpful commit message:\n1git commit -m \u0026#34;Initialise repository with a README\u0026#34; Finally, we can take a look at the log, to view metadata about our previous commits:\n1git log 3. Create a remote repository (on GitHub) Sign in to GitHub: https://github.com\nOn the top navigation bar, click the + button and select ‚ÄòNew repository‚Äô\nCreate a new repository: Give the repository the same name as your username, make sure it is ‚ÄòPublic‚Äô then click ‚ÄòCreate repository‚Äô.\n4. Push the contents of your local repository to the remote Now we want to associate our local repository with the one we have created on GitHub and push the contents of our local repository to GitHub.\nConnect the local repository with the remote repository:\n1git remote add origin https://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git Verify that the remote was added:\n1git remote -v You should see the following output:\n1origin\thttps://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git (fetch) 2origin\thttps://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git (push) Finally push your changes to GitHub:\n1git push -u origin main Check your GitHub repository to see if it contains your README file, and look at your profile to see that it is displayed!\nWell done on sharing your first repository üéâ\n5. Create a branch Now we want to make some changes to our README, but we don't want to commit them to the main branch yet. Therefore, we will use another branch.\nCreate a new branch, called ‚Äòadd-more-detail‚Äô:\n1git checkout -b add-more-detail Open the README.md file in a text editor (e.g. Notepad or TextEdit) and make some changes. Here is a template you can use:\n1# Hello, my name is \u0026lt;your name\u0026gt; üëã 2 3Pronouns: \u0026lt;your pronouns\u0026gt; 4Learning: command line, Git, HTML, CSS, Javascript, Python 5Interests: \u0026lt;your interests\u0026gt; You can be as creative as you want by adding text, emoji, images or gifs (and more!).\nOnce you have made some changes it is time to add and commit them:\n1git add . 2git commit -m \u0026#34;Add some new information\u0026#34; Then push the branch with the changes to the remote repository:\n1git push origin add-more-detail Take a look at your README profile - has it been updated?\n6. Create a pull request Let's say we want to get feedback on the changes we've made. We can do this with a Pull Request.\nGo to GitHub and view your branch. Select 'Create new pull request'.\nAssign the person you are paired with to review your pull request.\nReviewing a pull request If somebody has requested your feedback, you can use this as an opportunity to:\n Ask questions and provide feedback about the changes Approve the changes Request further changes  Once you have reviewed the changes, click Review changes and then Approve.\nMerge a pull request Once your pull request has been reviewed, you can merge it so that the main branch is updated with your changes.\nOn your pull request, go to the bottom of the page and select Rebase and merge.\nYou can now go to your command line, checkout the main branch and pull the changes so that your local main branch is up to date:\n1git checkout main 2git pull origin main Finally, take a look at your updated GitHub profile README and celebrate what you've achieved!\n7. Fork and clone a repository Note üìù\nThis task is unrelated to the previous tasks, but has been included because these features are useful.\nA fork is a copy of someone else‚Äôs remote repository, sometimes you will make a fork to build on someone else's work.\nNavigate to https://github.com/octocat/Spoon-Knife\nOn the top-right, select 'Fork'.\nOnce you have forked the repository, we can clone it to download a copy of the repository to your local machine. On the repository, select Code and copy the HTTPS link. Then navigate to your terminal and run:\n1git clone https://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git 8. Follow-up activity: make improvements to your GitHub Profile README There are plenty of wonderful examples out there, take a look at the examples in this repository for inspiration: https://github.com/abhisheknaiidu/awesome-github-profile-readme\nGlossary    Term Meaning     repository (also known as repo) the place where code is stored.   commit a snapshot of changes made to a repository   branch a pointer to a commit   remote a repository that is hosted by a web service   origin the remote repository associated with a project   head the last commit in the checked-out branch   status the current state of the git repository   pull get the latest changes from the remote repository on your local repo   push push the latest changes from the local repository to the remote repo   pull request (also known as a PR) lets you get feedback on your code changes   staging area the intermediate area where a change is added before it is commit    Extra resources  Writing a good commit messages, by FreeCodeCamp Markdown cheatsheet Learning git branching, by pcottle Dangit, git, by @ksylor (available in multiple languages) Learn git concepts, not Commands, by Nico Riedmann A visual introduction to Git, by Ashley Keller   Next class preparation Review Git and Command Line; Web Overview ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/git/git_and_github/","title":"21/September - Version Control with Git and GitHub"},{"body":"Pre Requisites Create an account in code.org website\n https://studio.code.org/users/sign_up  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Teacher/Student introduction 20-30 mins ‚ùå   Showing the outline of the course: 5-10 mins ‚ùå   Intro to computer science: 20-30 minutes ‚ùå   Small break 5mins ‚ùå   Dance Party 20-30 mins Register code.org   Small introduction to what is software/code 20-30 mins ‚ùå   Next class overview 5 mins ‚ùå    Extra resources  Intro to computer science Harvard - Binary Exploring how computers work How do computers remember History of computer science Scratch Presentation   Next class preparation Operating systems \u0026amp; Command Line Basics Part 1 ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/command/intro/","title":"14/Sept - Inspiration class "},{"body":"Pre Requisites Create an account on repl.it\n https://repl.it/signup  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Operating system (OS) basics 20-25 minutes ‚ùå   Principle of abstraction 5-10 minutes ‚ùå   Graphical \u0026amp; command line interfaces to OS 5-10 minutes ‚ùå   Linux file system hierarchy 5-10 minutes repl.it account   Class break 10 minutes ‚ùå   The Linux command line 35-40 minutes repl.it account   Job opportunities 5-10 minutes ‚ùå   Next class overview 5 minutes ‚ùå    Operating system (OS) basics  Questions  Can you think of any operating systems in nature? Can you think of any operating systems in society? What are some operating systems you've used?    Principle of abstraction  Questions:  Can you think of other examples of the Principle of abstraction in:  Society Science \u0026amp; Technology      The Linux command line  Questions:  Create an account on repl.it Click + New Repl on the top-left side of the page Select Bash from the Language drop-down menu Click create repl Explore the following commands in your bash command line interface on repl.it:  echo pwd ls cd cat cp mv mkdir touch find grep history date whoami      Job opportunities  Systems Administrator DevOps Engineer Site Reliability Engineer Questions:  Can you think of any other career opportunities?    Extra resources  Presentation Computer Basics: Understanding Operating Systems Operating Systems: Crash Course Computer Science #18 Beginner's Guide to the Bash Terminal What Is Abstraction in Computer Science How to use the Command Line Terminal On Your Mac How to Install Linux Terminal on Windows 10 Jobs: Linux \u0026amp; Career Opportunities Jobs: Inside Site Reliability Engineering Jobs: Career Switch to IT   Next class preparation Command Line Basics Part 2 ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/command/command_line_part1/","title":"14/Sept - Operating Systems \u0026 Command Line Basics"},{"body":"We will spend the first part of class going over how the internet works conceptually and then spend the rest of the session doing practical exercises using Git, GitHub, and the command line.\nPrerequisites 1. Watch these Videos These videos from Khan Academy's Internet 101 series will give you a high-level overview of how the internet works. Please try to take notes on the questions below each video; we will go over these in class as well, but they cover the main points from the videos. Write down any other questions you have or anything you don't understand as well! :)\n  IP addresses and DNS - 6:45\n What is the internet? What is an ISP? What is a protocol? What is the Internet Protocol (IP) for? How does it work? What is the difference between IPv4 and IPv6? What is the Domain Name System (DNS) and what does a DNS server do? How and when does a computer use this?      Packets, Routers, and Reliability - 6:25\n What is a packet? What does a router do? What is fault tolerance? What is TCP? What does it ensure?      HTTP and HTML - 7:07\n What is a web browser? What does HTTP stand for? How does it work? What is it used for? What is HTML? What is a GET request? What is a POST request? What is a cookie? What are SSL and TLS? Why are these important? How can you tell when these are in use? What is the difference between HTTPS and HTTP?     (Optional) Wires, cables, and WiFi: This video is for those who want more details on how information is broken up and transported through the wires that make up the internet, the differences between fiber optics/radio/copper cables, and how WiFI is different than wired internet. It's very interesting but not required :)  2. Review exercises from Thursday (21/September) Review the content from last class. Make sure that have completed the prerequisites from last class, including that your email is verified on GitHub. If you get stuck or feel confused about anything, no worries! Please write down any questions you have so that we can go over these in class.\nReview Previous Session: 21/September  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Agenda and Goals 5 minutes ‚ùå   Go over video questions in small groups 10-15 minutes videos   Kahoot on preparatory material 10-15 minutes videos   Review tricky questions as a whole class 10-15 minutes videos   Class break 10 minutes ‚ùå   Git Activity (in smaller groups) 45-60 minutes review last class    Lesson Goals  Have a high-level understanding of how the internet works Feel more comfortable with Git, GitHub, and the command line  Git and Command Line Review 0. Command Line cheat sheet Go through the following commands and operators to remind yourself what each of them does, and when you would use them.\nRemember that you can look up what a command does by using the man (manual-pages) command on Mac and Linux, or help command on Windows cmd. For example: man echo would give you information on what the echo command does and how to use it.     command what it does     echo print some text   pwd print working directory (print the path to where I currently am in the file system)   ls list the contents of the directory   cd change directory (this moves you, the viewer of the terminal, to a new location in the file system)   cat print the contents of the file   cp copy a file (note: to copy a directory you probably need to add an option (like -r) to copy a directory)   mv move a file or directory to a new location (note: this can also be useful for changing the name of a file/directory)   mkdir make a directory   touch create a new file   rm delete a file (note: to delete a directory, add the option -r or -d)   \u0026gt; the redirection operator (X \u0026gt; Y will send the outputs of command X to Y; if Y exists, it this will overwrite the existing file.)    1. Fork and clone repository First, navigate to the directory where you want to clone the repository. (If you don't already have a designated folder for class materials, create a directory for this and navigate into it.) Cloning a repository means creating a local copy of another repository, usually one that is stored on a remote server like GitHub.\nFork this repository. In the top right corner, click Fork. You may be prompted with a question like \u0026quot;Where should we fork this repository to?\u0026quot; If so, click your GitHub username; this will create a copy of the repository to your account.\nYou should then be automatically taken to the main page of this repository. On the upper right side, click Code (in green) and copy the HTTPS link. Then in your terminal run git clone \u0026lt;link-you-copied\u0026gt;. For example, this should look something like the following (with github-username replaced with your own github username):\n1git clone https://github.com/github-username/intro-to-cs-git-review.git Check that this directory now exists. (Hint: list the contents of the directory you are in, and make sure you see the cloned folder.)\nMove into that directory:\n1cd intro-to-cs-git-review Check the status of the git repository:\n1git status You should see output something like:\n1On branch main 2Your branch is up to date with \u0026#39;origin/main\u0026#39;. 3 4nothing to commit, working tree clean If so, great! You have successfully forked and cloned this repository. If not, check in with someone in your group or one of the teachers to help before moving on to the next steps.\n2. Checkout a new branch One of the great things about Git is being able to work on the same repository as others at the same time. A typical way of doing this when working on a project is by creating and checking out a new branch (via git checkout -b \u0026lt;branch-name\u0026gt;), making changes and committing your work, and pushing this work to your separate branch. Once you are ready to publish your changes to the main branch, you can create a pull request (PR) to have others review your changes and merge them to the main branch.\nEven though you are working on your own repository alone (since you forked, this is your own repository), let's practice creating a new branch so we can make some changes there and eventually merge this back to the main branch. Let's call this branch \u0026lt;github-username\u0026gt;/test-branch (leave out the \u0026lt;\u0026gt;, for example, for me, I would call the branch eelanagaraj/test-branch):\n1git checkout -b \u0026lt;github-username\u0026gt;/test-branch Check the status of the repository again before moving on to the next step, and make sure that you are on the correct branch. (Hint: run git status which displays the branch you are on, and make sure this is what you expect.)\n3. Making and committing some changes This activity should remind you a bit of the directory \u0026quot;maze\u0026quot; exploration activity that we did with Erg√ºn last week.\nLet's go ahead and explore the contents of this repository. For these tasks, feel free to look at your notes, the cheat sheet above, or ask each other for help if you're not sure how to complete a task :)\n  Print your current directory, to double check that you are in the right place :) The end of the path should be the name of the cloned repository.\n  Check what files and directories are present in this repository.\n  Print the contents of the README.md file. Now, compare the output in your terminal to the README displayed on the original remote repository. (Note: the README.md file will be displayed by default on your remote repository page!)\n  Move into the some-files directory. What files are in this repository?\n  Check the contents of each of the files in this folder (some-files). Delete the file that is empty (has no contents).\n  Check the status of the repository via git status. If you do not see something that says you deleted a file, please ask someone in your group or a teacher for help before moving on.\n  Stage the changes by running git add . and check the status again to make sure the changes have shown up in your staging area.\n  Create a commit now to \u0026quot;save\u0026quot; your changes--in this case, the deleted file. Try to leave a helpful commit message like below, replacing  with the file you deleted:\n1git commit -m \u0026#34;Deleted file \u0026lt;name-of-file\u0026gt;\u0026#34;   Check that the commit was successful by checking the status of the repository (git status) and checking the log (git log). You should see the commit message that you added at the top of the log, in addition to some previous commits from before you cloned the repository.\n  One of the non-empty files has the contents: Hello, I'm a file! What's your name?. Modify this file that answers the question with your name (or one of your choosing)! So far, we have used: echo \u0026quot;text\u0026quot; \u0026gt; file to add content to a file, but this will overwrite the file with the new contents. Instead, let's append to the file using the following command (replacing \u0026lt;file.txt\u0026gt; with the file you want to write to):\n1echo \u0026#34;My name is ___\u0026#34; \u0026gt;\u0026gt; \u0026lt;file.txt\u0026gt; You can also open this file in a text editor (like Sublime, Microsoft Word, Notepad, etc.) and modify it there and save your changes!\n  Check the git status again. Can you tell that a file has been modified? If not, ask someone in your group or a teacher for help before moving on. If so, in the same way as above, add these changes to your staging area and create another commit with a descriptive message of your choice. Check that this commit appears in the log as well.\n  Let's go ahead and push these commits so far to the remote repository. Run the following, replacing \u0026lt;current-branch\u0026gt; with the branch you are working on (if you forget what it is called, you can run git status or git branch and copy the branch name from there!):\n  1git push origin \u0026lt;current-branch\u0026gt;  Navigate out of the some-files directory, so you are back in the root of the repository. Display the contents of the files there. One of the files seems to be out of place; move this file to the some-files directory. Check that this file is now in the proper place by listing the contents of the directory some-files. Check the status of the repository again (git status). Notice that it thinks the file was deleted from the repository, but that there is now a new \u0026quot;untracked file\u0026quot; of the same name in some-files! Let's now add all of the files to the staging area and check the status of the repository again. What does it look like now? Let's commit these staged changes and check the log again to make sure they appeared. In the root of the repository, go ahead and delete the delete-me directory. (Hint: what option do you need to include to remove a directory?). Add, commit, and push these changes.  4. Create a pull request (PR) on GitHub As we did at the end of last class, let's create a pull request to merge this test-branch to main.\nGo to GitHub and view your branch: on the left side, there should be a button with main and a down arrow -- click this and select your branch. At the top, if there is an option to \u0026quot;Pull request\u0026quot;, click that, otherwise click on the \u0026quot;Pull request\u0026quot; tab and then \u0026quot;New pull request\u0026quot;.\nSince this is a forked branch, we are given the option of submitting a pull request against the original repository that we forked from (listed under base repository). This is often how you can contribute to open source projects -- by forking the repository, making your changes, and then submitting a PR against the original repo for the maintainers of the project to accept or reject.\nFor now, let's just PR within the fork, so change the base repository to be the forked repo. (The base repository and head repository should match, but the base branch should be main).\nAssign someone in your group and one of the teachers to review your pull request.\nTake a moment to review any PRs you were tagged on.\n5. [Optional] Advanced Git practice This is a section for if you are done with the earlier sections and want to try some new git commands out. This is completely optional and more complicated than the previous sections! Remember, you can play around with this repo as much as you want; use it to create new scenarios and test out Git commands to understand what they do. This is a toy repository, and you can always clone a fresh copy (first part of the activity) to restart from scratch, so there is low risk here :)\nFirst, we can use the git reset command to undo changes that we have made.\n Check that you are still on \u0026lt;your-username\u0026gt;/test-branch. Then, checkout a new branch \u0026lt;your-username\u0026gt;/undo-changes, replacing \u0026lt;your-username\u0026gt; with your GitHub username. Look at the git log, which should include all of the commits we made in the previous section. Let's say that we now want to \u0026quot;undo\u0026quot; the changes that we made in the last commit, deleting the delete-me folder. We realized after pushing this change that we actually want to keep this folder. Find and copy the commit hash (looks like a long string of letters and numbers, something like: 6ff15394c57d1d105482efd9359d7a061995fedc) of the commit right before this in the commit log. Let's now \u0026quot;reset\u0026quot; the state of the repository to this commit, right before we committed the change to delete the directory, replacing \u0026lt;commit-hash\u0026gt; with the hash from your commit log:  1git reset --hard \u0026lt;commit-hash\u0026gt;  Check the git status of your directory and the git log now. What is the most recent commit in the commit log now? Check the contents of the repository. Is the delete-me folder present or not? Check the contents of the delete-me folder. Feel free to try resetting the repository to different states (different commit hashes) and exploring a bit. Once you are done, you can checkout (get back onto) the main or test-branch from the earlier section and deleting the branch you just created:  1git checkout main 2git branch -D \u0026lt;your-username\u0026gt;/undo-changes If you still have time and want to continue playing around with Git, try to merge two branches that have made changes on the same file. You can see how Git tries to do this automatically and you may have to \u0026quot;resolve merge conflicts\u0026quot; if Git is not able to automatically merge the changes. To create a situation like this:\n Create two branches from the same \u0026quot;base\u0026quot; and checkout one of them. Remember, replace \u0026lt;new-branch-1\u0026gt; nd \u0026lt;new-branch-2\u0026gt; with branch names of your choice. (Bonus: look up how to do this via the git branch command instead of git checkout -b): 1git checkout -b \u0026lt;new-branch-1\u0026gt; \u0026lt;base-branch\u0026gt; 2git checkout -b \u0026lt;new-branch-2\u0026gt; \u0026lt;base-branch\u0026gt;  Modify and commit to a.txt on  Make a different change to the same file, a.txt on  Try to merge one branch into the other by checkout out  and then running git merge \u0026lt;new-branch-2\u0026gt;. Did you get any merge conflicts? See what the contents of file a.txt are. Try to fix any merge conflicts and commit this merge. Check the log to see what the merge commit looks like.  Extra resources  Interactive Git Cheatsheet - displays and explains different git commands Complete documentation of all git commands - this can feel a bit dense, but can be useful for deepening your understanding of how Git works under the hood.   Next class preparation Using an IDE (Integrated Development Environment) ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/git/review_git_command_line/","title":"21/September - Review Git and Command Line; Intro to the Internet"},{"body":"  Pre Requisites  Watch this video on files and file Systems  If this video was difficult to understand or you are unfamiliar with navigating the file system on your computer currently, we recommend that you watch this video and this followup video   Watch this video until 8:30 on file paths (Optional): watch this video on the history of keyboards and the command line interface (Optional - for Windows users only): install the Cmder console emulator (easier) or set up the windows subsystem for linux  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Kahoot 15 minutes videos   Questions from Kahoot + Session 1 15 minutes ‚ùå   Useful Terms/Concepts 5-10 minutes videos   Navigate file system and working with files \u0026amp; folders (demo) 10-15 minutes ‚ùå   Quick overview of package managers 5-10 minutes ‚ùå   Class break 10 minutes ‚ùå   Command line practice in groups 40-50 minutes local terminal OR repl.it account   Summary \u0026amp; Next class overview 5 minutes ‚ùå    Useful Terms/Concepts  File: data, usually organized according to some specific file format (e.g. txt, mp3, docx) Directory: what we think of as a folder that contains files and other folders; in Linux systems, this is just a file that stores information about the length and location of other files, similar to a table of contents File system: the part of an operating system that stores and keeps track of files File permissions: define which users/groups are allowed to read/write/execute certain files. If a user has the following permissions, they can:  Read: view the contents of the file Write: modify the contents of the file Execute: run the program (remember: programs are also treated as \u0026quot;files\u0026quot; in Linux systems and are permissioned using the same terms!)    Navigate file system and working with files \u0026amp; folders (demo) | 10-15 minutes Why use the command line?  once familiar with it, faster and easier to navigate the file system offers many powerful tools (especially, but not limited to, text and file manipulation) possible to group together commands and automate repeatable workflows helpful (often required) when working on virtual machines or infrastructure in the cloud  Demo Let's go through how to navigate the file system and work with files and folders. We will do this both via the command line using the commands listed in the cheat sheet below and then using the GUI (Graphical User Interface). Please refer to this cheat sheet when working through the exercises in groups later!\nCommand Line cheat sheet Remember that you can look up what a command does by using the man (manual-pages) command on Mac and Linux, or help command on Windows cmd. For example: man echo would give you information on what the echo command does and how to use it.     command what it does     pwd print working directory (print the path to where I currently am in the file system)   cd change directory (this moves you, the viewer of the terminal, to a new location in the file system). You may use an absolute file path or a relative path where . is the current working directory and .. is the parent directory.   ls list the contents of the directory   mkdir make a directory   touch create a new file   rm delete a file (note: to delete a directory, add the option -r or -d)   cp copy a file (note: to copy a directory you probably need to add an option (like -r))   mv move a file or directory to a new location (note: this can also be useful for changing the name of a file/directory)   echo print some text; often used in conjunction with other commands   cat print the contents of the file   \u0026gt; this is an operator: X \u0026gt; Y will redirect (send) the outputs of command X to Y; if Y exists, it this will overwrite the existing file.   \u0026gt;\u0026gt; this is an operator similar to the above: X \u0026gt;\u0026gt; Y will send the outputs of command X to Y; if Y exists, it this will append to the existing file.    Quick overview of package managers  Packages are collections of files that are bundled together and can be installed and removed as a group\nPackage managers allow you to:\n keep track of what software is installed easily install new software upgrade existing software to newer versions remove or uninstall software.  There are different package managers available for different Operating Systems and Distributions. Here are some examples:\n  MacOS: homebrew, AppStore\n  Windows: PackageManagement, Chocalatey...\n   Linux: yum, apt-get, zypper\n   Tasks for group work Work through the tasks with your partner/group. We recommend that one of you shares your screen and you discuss as a group how to proceed with each of the tasks. Each group member should be following along. It is totally fine if you don't complete all the tasks; make sure you understand how to do each task and ask questions if anything does not make sense! Complete any remaining tasks for homework.\n0. Open a terminal window Open a terminal window or Repl, where you can practice using the command line.\nOn Mac, you can do this by searching for \u0026quot;Terminal\u0026quot; in your Applications folder or using the keyboard shortcut \u0026quot;Command + Space\u0026quot; and then typing in \u0026quot;Terminal\u0026quot;.\nOn Windows, open Cmder if you installed this as part of the prerequisites, or if you installed the Linux subsystem for windows, you can run WSL or follow the instructions described in the video. Alternatively, you can use Cygwin or the gitbash shell to practice Linux commands, or if nothing is available or working on your machine, please use Repl for today.\nIf you are running into any challenges with this, reach out to one of the teachers.\n1. Move to the parent directory and back  Print your working directory Move into the parent directory, if there is one. Move back into the directory you came from.  Hint: if your original working directory path looked something like folder1/folder2/folder3, then for this task, you want to move to folder1/folder2 and then back to folder1/folder2/folder3.\n2. Create a redi folder Let's create a folder to store the work from this session.\n Navigate to the place where you would like this folder to be located. The current working directory is fine, but you can also navigate to your desktop or another folder where you keep course work. Create a new directory (folder) titled redi-2021-09-16 Move into this new directory and print your working directory. Double check that your working directory now includes redi-2021-09-16.  3. Create some files Now let's create some files to go in this new directory.\n  Create an empty file called \u0026quot;test1.txt\u0026quot; using the touch command.\n  Create a second file called \u0026quot;hello.txt\u0026quot; which contains the phrase: \u0026quot;hello, my name is YOUR_NAME_HERE!\u0026quot;. (Replace YOUR_NAME_HERE with your name :)) Hint: use the echo command and the \u0026gt; operator to do this.\n  List the files that are in the directory, and make sure that it looks something like:\n1test1.txt hello.txt   Append the line \u0026quot;How are you doing?\u0026quot; to the file \u0026quot;hello.txt\u0026quot;\n  Print the contents of the file and make sure that it looks something like:\n1hello! my name is YOUR_NAME_HERE! 2How are you doing?   4. Move these files into a new directory Let's organize the directory that we are in by putting some of the files in a new location.\n Create a folder (directory) called test-files in the redi-2021-09-16 folder List the contents of the directory that you are in and make sure that it looks something like: 1test1.txt hello.txt test-files  Move test1.txt into the test-files directory. List the contents of test-files and make sure it contains only test1.txt, and list the contents of redi-2021-09-16 to confirm that test1.txt has been moved.  5. Copy files and directories  Copy of hello.txt into the test-files directory. (Hint: this can be done in one command by copying the file to the proper location, or by creating a copy and then moving the file.) Rename the original hello.txt to original-hello.txt. (Hint: \u0026quot;renaming\u0026quot; is the same as moving a file to a new file path.) Make a copy of the test-files directory named test-files-copy. List the contents of test-files-copy and make sure that it contains both test1.txt and original-hello.txt.  6. Delete files and directories Be careful with this one! Please double check the command with one of the teachers before removing anything, since anything removed via rm cannot be retrieved!!\n In the test-files-copy, delete the test1.txt file. Confirm that test-files-copy contains only original-hello.txt. Delete the entire test-files-copy directory. List the contents of the redi-2021-09-16 directory and make sure that the test-files-copy directory is gone, but that the original test-files directory and other files are still present.  (Optional) 7. Additional Practice These are additional challenge tasks that are meant to be extra challenging, in case the previous tasks went by more quickly than expected! :)\n Use the man-pages and Google to understand how to use the grep command. Use this command to search for occurrences of the text \u0026quot;my name is\u0026quot; in the redi-2021-09-16 directory. (Hint: you can use the -r option to do this) Create a journal/diary as a group with the following structure: the journal folder should contain year folders on the first level. Within a year folder are month folders, which contain text files for each individual day. A file path for one of these may look like: .../journal/2021/09/16.txt. Create a few entries that have some text! Take a look at some of the extra resources :)  Extra resources  Linux Filesystem Hierarchy - Part 1 Linux Filesystem Hierarchy - Part 2 Briana's Bash Tutorial: How to Use the Command Line in Linux, Windows, and Mac A linux command line primer Learn Enough Command Line to Be Dangerous Linux command line basic cheat sheet The Linux Command Handbook Package Managers What is a package manager in Linux   Next class preparation Coming soon! Version Control with GIT\n","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/command/command_line_part2/","title":"16/September/2021 - Command Line Basics Part 2"},{"body":"Prerequisites 1. Install VsCode Visual Studio Code is a freeware source-code editor made by Microsoft for Windows, Linux and macOS. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git. Wikipedia\nDuring this course, while working with HTML and Pything we might end up working with an code editor to make easier interacting with files and folder. An editor can be considered the notebook of a programmer. This, with the terminal, will be considered your main tools to reach your goals :D\nTo install VSCode please download it by clicking on the Download button of the next link -\u0026gt;\nVSCode\nYou can start playing with it if you want, during the class we will see how to work with it.\n2. Review exercises from Tuesday (21/September) Review the content from last class. Make sure that have completed the prerequisites from last class, including that your email is verified on GitHub. If you get stuck or feel confused about anything, no worries! Please write down any questions you have so that we can go over these in class.\nReview Previous Session: 21/September  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Little quiz with Kahoot 10 ‚ùå   Recap of what we did last class + questions? 10 minutes ‚ùå   Learning Markdown 20 minutes ‚ùå   Learners form 10 minutes review last class   Class break 7-10 minutes ‚ùå   Creating our own Journal in Github 45 minutes VSCode installed   Real life example 10 minutes VSCode installed    Lesson Goals  Know how to use an editor and move around What is a Markdown file  Learning Markdown Markdown is a way to write content for the web. It‚Äôs written in what people like to call ‚Äúplaintext‚Äù, which is exactly the sort of text you‚Äôre used to writing and seeing. Plaintext is just the regular alphabet, with a few familiar symbols, like asterisks ( * ) and backticks ( ` ).\nUnlike cumbersome word processing applications, text written in Markdown can be easily shared between computers, mobile phones, and people. It‚Äôs quickly becoming the writing standard for academics, scientists, writers, and many more. Websites like GitHub and reddit use Markdown to style their comments.\nTo get started with the tutorial let¬¥s jump here:\nMARKDOWN TUTORIAL\nCreating your own journal! 0. Command Line cheat sheet Remember that you can look up what a command does by using the man (manual-pages) command on Mac and Linux, or help command on Windows cmd. For example: man echo would give you information on what the echo command does and how to use it.     command what it does     echo print some text   pwd print working directory (print the path to where I currently am in the file system)   ls list the contents of the directory   cd change directory (this moves you, the viewer of the terminal, to a new location in the file system)   cat print the contents of the file   cp copy a file (note: to copy a directory you probably need to add an option (like -r) to copy a directory)   mv move a file or directory to a new location (note: this can also be useful for changing the name of a file/directory)   mkdir make a directory   touch create a new file   rm delete a file (note: to delete a directory, add the option -r or -d)   \u0026gt; the redirection operator (X \u0026gt; Y will send the outputs of command X to Y; if Y exists, it this will overwrite the existing file.)    0. Git cheat sheet These are some of the most famous commands you need.\n   command what it does     git clone \u0026lt;repo\u0026gt; Clone repo located at  onto local machine. Original repo can be located on the local filesystem or on a remote machine via HTTP or SSH.   git config user.name \u0026lt;name\u0026gt; Define author name to be used for all commits in current repo. Devs commonly use --global flag to set config options for current user.   git add \u0026lt;directory\u0026gt; Stage all changes in  for the next commit. Replace  with a  to change a specific file.   git commit -m \u0026quot;\u0026lt;message\u0026gt;\u0026quot; Commit the staged snapshot, but instead of launching a text editor, use  as the commit message.   git status List which files are staged unstaged, and untracked.   git log Display the entire commit history using the default format. For customization see additional options.    1. Fork and clone your new Journal First, navigate to the directory where you want to clone the journal. (If you don't already have a designated folder for class materials, create a directory for this and navigate into it.) Cloning a repository means creating a local copy of another repository, usually one that is stored on a remote server like GitHub.\nFork this repository. In the top right corner, click Fork. You may be prompted with a question like \u0026quot;Where should we fork this repository to?\u0026quot; If so, click your GitHub username; this will create a copy of the repository to your account.\nYou should then be automatically taken to the main page of this repository.\nOn the upper right side, click Code (in green) and copy the HTTPS link. Then in your terminal run git clone \u0026lt;link-you-copied\u0026gt;. For example, this should look something like the following (with github-username replaced with your own github username):\n1git clone https://github.com/ReDI-School/spring-2021-intro-to-programming-md-journal Check that this directory now exists. (Hint: list the contents of the directory you are in, and make sure you see the cloned folder.)\nMove into that directory (small hint -\u0026gt; write cd spring and then press the key TAB and it will autocomplete):\n1cd spring-2021-intro-to-programming-md-journal Check the status of the git repository:\n1git status You should see output something like:\n1On branch main 2Your branch is up to date with \u0026#39;origin/main\u0026#39;. 3 4nothing to commit, working tree clean If so, great! You have successfully forked and cloned this repository. If not, check in with someone in your group or raise your hand so one of the teachers to help before moving on to the next steps.\n2. Checkout a new branch One of the great things about Git is being able to work on the same repository as others at the same time. A typical way of doing this when working on a project is by creating and checking out a new branch (via git checkout -b \u0026lt;branch-name\u0026gt;), making changes and committing your work, and pushing this work to your separate branch. Once you are ready to publish your changes to the main branch, you can create a pull request (PR) to have others review your changes and merge them to the main branch.\nEven though you are working on your own repository alone (since you forked, this is your own repository), let's practice creating a new branch so we can make some changes there and eventually merge this back to the main branch. Let's call this branch \u0026lt;your-github-username\u0026gt;/test-branch (leave out the \u0026lt;\u0026gt;, for example, for me, I would call the branch omarsotillofranco/journal1):\n1git checkout -b \u0026lt;your-github-username\u0026gt;/test-branch Check the status of the repository again before moving on to the next step, and make sure that you are on the correct branch. (Hint: run git status which displays the branch you are on, and make sure this is what you expect.)\n3. Open with VSCode the folder you have just created Open VScode! :D once you are there let's click on file in the top left corner and click on Open.... Look for the the folder in your system you have just created (probably should be around /home) and click it.\nYour VSCode should show now on the left side the differents files and folders from the current scenario.\n4. Complete the tasks in the README.md file from the repository you have just created. In the README.md file from the repo you have just copied there is a section called ## TASKS. Go slowly one by one and complete them by marking them with a X\n5. Adding and committing some changes Once completed! let's make the world know about our recipes. This activity should remind you a bit of the directory \u0026quot;maze\u0026quot; exploration activity that we did with Erg√ºn last week.\n  Check the status of the repository via git status. If you do not see something that says you deleted a file, please ask someone in your group or a teacher for help before moving on.\n  Stage the changes by running git add . or git add --all and check the status again to make sure the changes have shown up in your staging area. They should be green\n  Create a commit now to \u0026quot;save\u0026quot; your changes--in this case, the deleted file. Try to leave a helpful commit message like below, replacing  with the file you deleted:\n1git commit -m \u0026#34;Created my first journal!\u0026#34;   Check that the commit was successful by checking the status of the repository (git status) and checking the log (git log). You should see the commit message that you added at the top of the log, in addition to some previous commits from before you cloned the repository.\n  Let's go ahead and push these commits so far to the remote repository. Run the following, replacing \u0026lt;current-branch\u0026gt; with the branch you are working on (if you forget what it is called, you can run git status or git branch and copy the branch name from there!):\n  1git push origin \u0026lt;current-branch\u0026gt; 6. Create a pull request (PR) on GitHub As we did at the end of last class, let's create a pull request to merge this test-branch to main.\nGo to GitHub and view your branch: on the left side, there should be a button with main and a down arrow -- click this and select your branch. At the top, if there is an option to \u0026quot;Pull request\u0026quot;, click that, otherwise click on the \u0026quot;Pull request\u0026quot; tab and then \u0026quot;New pull request\u0026quot;.\nSince this is a forked branch, we are given the option of submitting a pull request against the original repository that we forked from (listed under base repository). This is often how you can contribute to open source projects -- by forking the repository, making your changes, and then submitting a PR against the original repo for the maintainers of the project to accept or reject.\nFor now, let's just PR within the fork, so change the base repository to be the forked repo. (The base repository and head repository should match, but the base branch should be main).\nAssign someone in your group to the PR 'it can be seen in the right section and approve and merge the changes into main.\n7. (Optional) Let¬¥s swap places Now it is time for your partner to repeat what you have done.\nBUT! instead of forking the repository we will clone directly your partner repository so both of you can contribute towards a shared journal.\nFor that let¬¥s do the following:\n Ask your partner for an URL pointing to his journal repository that both of you have created and existts in Github. Let¬¥s clone the repository (make sure the Pull Request opened is merged and that the main branch has the content you just created) Add some new files, folders, images and after add, commit and push your changes. You can go back to section 3 and repeat the same instructions  Extra resources  Git online VSCode Crash course   VSCODE CHEATSHEET Install an extension Installing an extension\nCreating a new folder To create a folder we first need to click on the left sidebar the explorer icon. After that we click on the New Folder button and name it as we want.\nhttps://www.youtube.com/watch?v=fEp5nWvujhI\nCreating a new file To create a file we first need to click on the left sidebar the explorer icon. After that we click on the New File button and name it as we want.\nhttps://www.youtube.com/watch?v=2QBYlfSQA6s\nCopying a file Right click the file and click on copy or select it a Command/Control+c.\nTo paste it, we go over the folder where we want to paste it and we press Command/Control+c\nSearching for text Press Command/Control+f to search for something in the current opened file. To search in the whole folder click in the magnifying glass.\nNext class preparation Web Fundamentals ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/git/ide_and_review/","title":"18/March - Using an IDE (Integrated development environment)"},{"body":"Welcome to Intro to Computer-Science Autumn 2021 course Berlin üá©üá™ Here you will find most of the content for our courses, prerequisites for each class, summaries of the classes and extra content so you can work on your own.\nGet started with the course üöÄ\n Margaret Hamilton - She sent rockets to the moon üöÄ\n  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/","title":"Berlin 2021 - Intro to Computer Science"}]