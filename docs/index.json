[{"body":" Basics of operating system A brief history and potential of Linux Command Line Linux file system hierarchy Navigation of Linux file system Working with files: Create, View, Manipulate Creation of hard and soft links Using command options  Let\u0026#39;s learn the Command Line! üíª ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/command/","title":"1 - Operating systems \u0026 Command Line"},{"body":" Git terminology Working with a local repository on the command line Creating, initializing, and cloning a repository Basics of branching Staging and commiting work Setting up remote repository (GitHub) and pushing local commits  Let\u0026#39;s learn about Git! üíª ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/git/","title":"2 - Version Control with Git and GitHub"},{"body":" Basic knowledge of HTML Basic knowledge of CSS Practical lesson demonstrating HTML \u0026amp; CSS Basic knowledge of JavaScript Practical lesson demonstrating HTML, CSS \u0026amp; JavaScript Job Opportunities (frontend dev)  Basic knowledge of HTML üíª ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/web/","title":"3 - Web development"},{"body":"In this awesome course You will be learning fundamental computer science skills that are an absolute MUST for any IT field üéâ\nYou will be also introduced to programming and have your very first practical experience with one of the most popular programming languages: Python, HTML, CSS and Javascript.\nSections üìö These docs consists of four parts:\n Basic Command Line (Linux) Version Control with GIT Web Fundamentals Introduction to Programing (Python)  After this course ü§î  Understand and use the basic command line Use git/GitHub repository Understand the fundamentals of the web and its working Do basic python programming  After the successful completion of this introductory course, you can choose and apply for any other intermediate-level courses offered by ReDI!\nCourses links Basic Command Line Version Control with GIT Web Fundamentals Introduction to Programing (Python) ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/","title":"Welcome to the course üéâ"},{"body":"Preparations 1. Review exercises from Version Control with Git and GitHub (21/September) Reivew the content from the Git and GitHub lecture. We'll use github to store the HTML files we create in this lecture.\nReview Version Control with Git and GitHub: 21/September 2. Review exercises from Using an IDE (Integrated development environment) (30/September) Review the content from last lecture on Using an IDE with VsCode. We'll use VsCode to work on creating HTML files in this lecture.\nReview Using an IDE with VsCode: 30/September 3. Read through the following HTML tutorials from the W3Schools  HTML Introduction HTML Elements HTML Attributes HTML Headings HTML Paragraphs HTML Styles HTML Text Formatting HTML Colors HTML Links HTML Images HTML Tables HTML Lists HTML IFrames HTML Forms HTML Form Elements HTML Input Types HTML Video HTML Audio HTML YouTube  4. Watch these Videos The following video from Khan Academy's Internet 101 series will give you a high-level overview of how HTTP and HTML works.\n  HTTP and HTML - 7:07\n What is a web browser? What does HTTP stand for? How does it work? What is it used for? What is HTML? What is a GET request? What is a POST request? What is a cookie? What are SSL and TLS? Why are these important? How can you tell when these are in use? What is the difference between HTTPS and HTTP?    5. HTML class practice repository on Github Visit the following github page and follow the instructions to work on the activity for this class\n https://github.com/ReDI-School/ber-intro-to-cs-2021-html-journal   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Agenda and Goals 5 minutes ‚ùå   Go over preparation questions in small groups 10-15 minutes Preparations section   Kahoot on preparatory material 10-15 minutes Preparations section   Review HTML Activity task as a whole class 10-15 minutes Preparations section   Class break 10 minutes ‚ùå   HTML Activity (in smaller groups) * link 45-60 minutes VsCode and Git installed    Lesson Goal Understand what HTML is, why we use it and create a HTML-based journal with links and graphics\nHTML - What is it? HTML, HyperText Markup Language, is a markup language for documents designed to be displayed in a Web Browser.\nWeb brosers fetch HTML documents from Web servers over the internet or on your laptop\nStructure of HTML Documents HTML elements are the building blocks of HTML pages and specify how text, images, video and interactive forms can be embedded on a web page which is being displayed in the browser.\nHTML elements are specified using tags that are within angle brackets \u0026lt;\u0026gt; for example the \u0026lt;html\u0026gt; tag. Tags usually come in pairs of start and end tags. For example \u0026lt;html\u0026gt; and \u0026lt;/html\u0026gt;. Usually when speaking about HTML tags, we simply ignore whether it is a start or end tag and simply use the tag name.\nThe set of all start and end tags in a HTML document form a hierarchy (just like a family tree). For example in the HTML markup below, the \u0026lt;html\u0026gt; tag is the parent of the \u0026lt;head\u0026gt; and \u0026lt;body\u0026gt; tags. The \u0026lt;title\u0026gt; tag is a child of the \u0026lt;head\u0026gt; tag and a grandchild of the \u0026lt;html\u0026gt; tag.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3 \u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;This is a title\u0026lt;/title\u0026gt; 5 \u0026lt;/head\u0026gt; 6 \u0026lt;body\u0026gt; 7 \u0026lt;div\u0026gt; 8 \u0026lt;p\u0026gt;Hello world!\u0026lt;/p\u0026gt; 9 \u0026lt;/div\u0026gt; 10 \u0026lt;/body\u0026gt; 11\u0026lt;/html\u0026gt; Important HTML Tags    Tag Purpose Playground     \u0026lt;html\u0026gt; \u0026lt;/html\u0026gt; Creates an HTML document    \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; Contains the title of the document \u0026amp; other info that isn't displayed Try it   \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; Contains the visible parts of the document    \u0026lt;title\u0026gt; \u0026lt;/title\u0026gt; Specifies the name of the document in the browser title bar; when bookmarking pages, this is what is bookmarked    \u0026lt;h1\u0026gt; \u0026lt;/h1\u0026gt; to \u0026lt;h6\u0026gt; \u0026lt;/h6\u0026gt; Creates text headlines. H1=largest, H6=smallest Try it   \u0026lt;strong\u0026gt; \u0026lt;/strong\u0026gt; or \u0026lt;b\u0026gt; \u0026lt;/b\u0026gt; Emphasizes a word (usually processed in bold) Try it   \u0026lt;em\u0026gt; \u0026lt;/em\u0026gt; or \u0026lt;i\u0026gt; \u0026lt;/i\u0026gt; Emphasizes a word (usually processed in italics) Try it   \u0026lt;a href=\u0026quot;URL\u0026quot;\u0026gt;clickable text\u0026lt;/a\u0026gt; Creates a link to another web page or website Try it   \u0026lt;p\u0026gt; \u0026lt;/p\u0026gt; Creates a new paragraph Try it   \u0026lt;br /\u0026gt; Interrupts the flow of text to a new line Try it   \u0026lt;div\u0026gt; \u0026lt;/div\u0026gt; Used to format block content with CSS Try it   \u0026lt;span\u0026gt; \u0026lt;span\u0026gt; Used to format inline content with CSS Try it   \u0026lt;ul\u0026gt; \u0026lt;/ul\u0026gt; Creates an unordered list Try it   \u0026lt;ol start=xx\u0026gt; \u0026lt;/ol\u0026gt; Creates an ordered list (start=xx, where xx is a counting number) Try it   \u0026lt;li\u0026gt; \u0026lt;/li\u0026gt; Specifies each list item of either the unordered or ordered list Try it   \u0026lt;img src=\u0026quot;URL\u0026quot; /\u0026gt; Specifies an image located at the URL Try it   \u0026lt;table\u0026gt; \u0026lt;/table\u0026gt; Creates a table Try it   \u0026lt;th\u0026gt; \u0026lt;/th\u0026gt; Creates a table header    \u0026lt;tr\u0026gt; \u0026lt;/tr\u0026gt; Creates a row of a table    \u0026lt;td\u0026gt; \u0026lt;/td\u0026gt; Creates a column within a row of a table    \u0026lt;iframe\u0026gt; \u0026lt;/iframe\u0026gt; Used to embed a webpage within another webpage. Its useful for embedding youtube videos on a web page Try it    Glossary    Term Meaning     HTML Hypertext Markup Language is a markup language used to specify what we want on Web Pages e.g. Tables, lists, links   CSS Cascading Style Sheets is a style sheet language for styling web pages e.g. for the colors or format of text   Static web page A static web page is a web page whose content cannot be changed when displayed in a browser   Dynamic web page A dynamic web page is a web page whose content can be changed based on various conditions for example based on the user's location or user's browser type   Browser compatibility This is the phenomenon where a certain web page or website works differently across different browsers. For example, you might ask \u0026quot;Is this HTML element compatible with Internet Explorer 11?\u0026quot; if you want to know if a HTML element will work as expected with Internet Explorer 11   W3Schools This is a website which provides documentation for HTML and CSS   Hypertext Hypertext describes texts on the web that forms links. A web page is a hypertext document which contains links allowing us to go from one page to the next   Cascading Cascading, in the context of CSS, is the process of combining/merging several style sheets before they are applied to a HTML element   Markup language A markup language defines a set of rules for describing documents in a format that is both human-readable and machine-readable   Programming language A programming language provides a set of commands and syntax that can be used to write computer programs which are understood by the computer    Extra resources  HTML Class Practice HTML cheatsheet, by Stanford University  Next class preparation Basics knowledge of CSS ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/web/basic_html/","title":"04/October - Basic knowledge of HTML"},{"body":"Preparations 1. Watch these Videos  Why Is CSS So Weird? - Theory \u0026amp; history Learn CSS in 20 Minutes - Practice Learn CSS Flexbox 15 Minutes - Practice Learn CSS Grid 20 Minutes - Practice  2. HTML class practice repository on Github We'll continue to apply some style to the journal we started building in our previous session Basic HTML\n https://github.com/ReDI-School/ber-intro-to-cs-2021-html-journal   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Agenda and Goals 5 minutes ‚ùå   Questions from last session 15 minutes ‚ùå   Live demo on basic CSS 25 minutes Preparations section   Review CSS Activity task as a whole class 10 minutes ‚ùå   Class break 10 minutes ‚ùå   CSS Activity (in smaller groups) 45-60 minutes VsCode and Git installed    Lesson Goal Understand what CSS is, why we use it and how we can apply it to style HTML pages\nCSS - What is it? CSS (Cascading Style Sheets) is a declarative language that controls how webpages look in the browser. The browser applies CSS style declarations to selected elements to display them properly. A style declaration contains the properties and their values, which determine how a webpage looks.\nCSS is one of the three core Web technologies, along with HTML and JavaScript. CSS usually styles HTML elements, but can be also used with other markup languages like SVG or XML.\nCSS Rule A CSS rule is a set of properties associated with a selector. Here is an example that makes every HTML paragraph yellow against a black background:\n1/* The selector \u0026#34;p\u0026#34; indicates that all paragraphs in the document will be affected by that rule */ 2p { 3 /* The \u0026#34;color\u0026#34; property defines the text color, in this case yellow. */ 4 color: yellow; 5 6 /* The \u0026#34;background-color\u0026#34; property defines the background color, in this case black. */ 7 background-color: black; 8} How does CSS Actually Work When a browser displays a document, it must combine the document's content with its style information. It processes the document in a number of stages, which we've listed below. Bear in mind that this is a very simplified version of what happens when a browser loads a webpage, and that different browsers will handle the process in different ways. But this is roughly what happens.\n  The browser loads the HTML (e.g. receives it from the network).\n  It converts the HTML into a DOM (Document Object Model). The DOM represents the document in the computer's memory.\n  The browser then fetches most of the resources that are linked to by the HTML document, such as embedded images and videos ... and linked CSS! JavaScript is handled a bit later on in the process, and we won't talk about it here to keep things simpler.\n  The browser parses the fetched CSS, and sorts the different rules by their selector types into different \u0026quot;buckets\u0026quot;, e.g. element, class, ID, and so on. Based on the selectors it finds, it works out which rules should be applied to which nodes in the DOM, and attaches style to them as required (this intermediate step is called a render tree).\n  The render tree is laid out in the structure it should appear in after the rules have been applied to it.\n  The visual display of the page is shown on the screen (this stage is called painting).\n  How CSS is structured There are typically 3 ways we do that to include CSS in a HTML Page:\n Inline CSS  1\u0026lt;h1 style=\u0026#34;color: blue\u0026#34;\u0026gt;Hello world!\u0026lt;/h1\u0026gt; Internal CSS  1\u0026lt;head\u0026gt; 2 \u0026lt;style\u0026gt; 3 h1 { 4 color: blue; 5 } 6 \u0026lt;/style\u0026gt; 7\u0026lt;/head\u0026gt; External CSS  1\u0026lt;head\u0026gt; 2 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34; /\u0026gt; 3\u0026lt;/head\u0026gt; CSS Selectors  Element  The first way to select an HTML element is by simply using the name:\n1h1 { 2 font-size: 20px; 3} 4p { 5 color: green; 6} 7div { 8 margin: 10px; 9} We are selecting different elements like h1, p, div and giving them different style attributes. The font-size controls the size of the text, color sets the text color, and margin adds spacing around the element.\nClass  Another way of selecting HTML elements is by using the class attribute. In HTML, we can assign different classes to our elements. Each element can have multiple classes, and each class can also be applied to multiple elements as well.\n1\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 2 \u0026lt;h1\u0026gt;This is heading\u0026lt;/h1\u0026gt; 3\u0026lt;/div\u0026gt; 4 5.container { background-color: blue; } In the code above, we have assigned the class of container to the div element. In the stylesheet, we select our class using .className format and giving it a blue background color.\nID  Like classes, we can also use IDs to select HTML elements and apply styling to them. The only difference between class and ID is that one ID can be assigned to only one HTML element in one page.\n1\u0026lt;div\u0026gt; 2 \u0026lt;p id=\u0026#34;para1\u0026#34;\u0026gt;This is a paragraph\u0026lt;/p\u0026gt; 3\u0026lt;/div\u0026gt; 4 5#para1 { color: green; font-size: 16px; } Activities   Add a style sheet to the journal you were working on previously, and change the colors, fonts, etc. of your journal. Be creative here! Make sure to commit and push the changes to your repository afterwards. Some example tasks:\n Change the color and font size of all of the h1 (large heading) tags (hint: use element selection) Create several CSS classes to style the color, font, font size, background color, and alignment of text. Apply these classes to several elements of your journal. Create an \u0026quot;id\u0026quot; to select a particular paragraph or div in your journal and style (i.e. change the color or background of the paragraph or div).    (optional - it's ok if you don't get to this task!) Spend some time working through Grid Garden with your partner.\n  (optional - it's ok if you don't get to this task!)Spend some time working through CSS Diner with your partner.\n  Extra resources  Learn to style HTML using CSS Build a Classic Layout FAST in CSS Grid Inspecting the CSS Cascade using Firefox DevTools Flexbox Froggy  Next class preparation Practical lesson demonstrating HTML \u0026amp; CSS ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/web/basic_css/","title":"07/October - Basic knowledge of CSS (Cascading Style Sheet)"},{"body":"Pre Requisites Create an account in code.org website\n https://studio.code.org/users/sign_up  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Teacher/Student introduction 20-30 mins ‚ùå   Showing the outline of the course: 5-10 mins ‚ùå   Intro to computer science: 20-30 minutes ‚ùå   Small break 5mins ‚ùå   Dance Party 20-30 mins Register code.org   Small introduction to what is software/code 20-30 mins ‚ùå   Next class overview 5 mins ‚ùå    Extra resources  Intro to computer science Harvard - Binary Exploring how computers work How do computers remember History of computer science Scratch Presentation   Next class preparation Operating systems \u0026amp; Command Line Basics Part 1 ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/command/intro/","title":"14/Sept - Inspiration class "},{"body":"Pre Requisites Create an account on repl.it\n https://repl.it/signup  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Operating system (OS) basics 20-25 minutes ‚ùå   Principle of abstraction 5-10 minutes ‚ùå   Graphical \u0026amp; command line interfaces to OS 5-10 minutes ‚ùå   Linux file system hierarchy 5-10 minutes repl.it account   Class break 10 minutes ‚ùå   The Linux command line 35-40 minutes repl.it account   Job opportunities 5-10 minutes ‚ùå   Next class overview 5 minutes ‚ùå    Operating system (OS) basics  Questions  Can you think of any operating systems in nature? Can you think of any operating systems in society? What are some operating systems you've used?    Principle of abstraction  Questions:  Can you think of other examples of the Principle of abstraction in:  Society Science \u0026amp; Technology      The Linux command line  Questions:  Create an account on repl.it Click + New Repl on the top-left side of the page Select Bash from the Language drop-down menu Click create repl Explore the following commands in your bash command line interface on repl.it:  echo pwd ls cd cat cp mv mkdir touch find grep history date whoami      Job opportunities  Systems Administrator DevOps Engineer Site Reliability Engineer Questions:  Can you think of any other career opportunities?    Extra resources  Presentation Computer Basics: Understanding Operating Systems Operating Systems: Crash Course Computer Science #18 Beginner's Guide to the Bash Terminal What Is Abstraction in Computer Science How to use the Command Line Terminal On Your Mac How to Install Linux Terminal on Windows 10 Jobs: Linux \u0026amp; Career Opportunities Jobs: Inside Site Reliability Engineering Jobs: Career Switch to IT   Next class preparation Command Line Basics Part 2 ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/command/command_line_part1/","title":"14/Sept - Operating Systems \u0026 Command Line Basics"},{"body":"  Pre Requisites  Watch this video on files and file Systems  If this video was difficult to understand or you are unfamiliar with navigating the file system on your computer currently, we recommend that you watch this video and this followup video   Watch this video until 8:30 on file paths (Optional): watch this video on the history of keyboards and the command line interface (Optional - for Windows users only): install the Cmder console emulator (easier) or set up the windows subsystem for linux  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Kahoot 15 minutes videos   Questions from Kahoot + Session 1 15 minutes ‚ùå   Useful Terms/Concepts 5-10 minutes videos   Navigate file system and working with files \u0026amp; folders (demo) 10-15 minutes ‚ùå   Quick overview of package managers 5-10 minutes ‚ùå   Class break 10 minutes ‚ùå   Command line practice in groups 40-50 minutes local terminal OR repl.it account   Summary \u0026amp; Next class overview 5 minutes ‚ùå    Useful Terms/Concepts  File: data, usually organized according to some specific file format (e.g. txt, mp3, docx) Directory: what we think of as a folder that contains files and other folders; in Linux systems, this is just a file that stores information about the length and location of other files, similar to a table of contents File system: the part of an operating system that stores and keeps track of files File permissions: define which users/groups are allowed to read/write/execute certain files. If a user has the following permissions, they can:  Read: view the contents of the file Write: modify the contents of the file Execute: run the program (remember: programs are also treated as \u0026quot;files\u0026quot; in Linux systems and are permissioned using the same terms!)    Navigate file system and working with files \u0026amp; folders (demo) | 10-15 minutes Why use the command line?  once familiar with it, faster and easier to navigate the file system offers many powerful tools (especially, but not limited to, text and file manipulation) possible to group together commands and automate repeatable workflows helpful (often required) when working on virtual machines or infrastructure in the cloud  Demo Let's go through how to navigate the file system and work with files and folders. We will do this both via the command line using the commands listed in the cheat sheet below and then using the GUI (Graphical User Interface). Please refer to this cheat sheet when working through the exercises in groups later!\nCommand Line cheat sheet Remember that you can look up what a command does by using the man (manual-pages) command on Mac and Linux, or help command on Windows cmd. For example: man echo would give you information on what the echo command does and how to use it.     command what it does     pwd print working directory (print the path to where I currently am in the file system)   cd change directory (this moves you, the viewer of the terminal, to a new location in the file system). You may use an absolute file path or a relative path where . is the current working directory and .. is the parent directory.   ls list the contents of the directory   mkdir make a directory   touch create a new file   rm delete a file (note: to delete a directory, add the option -r or -d)   cp copy a file (note: to copy a directory you probably need to add an option (like -r))   mv move a file or directory to a new location (note: this can also be useful for changing the name of a file/directory)   echo print some text; often used in conjunction with other commands   cat print the contents of the file   \u0026gt; this is an operator: X \u0026gt; Y will redirect (send) the outputs of command X to Y; if Y exists, it this will overwrite the existing file.   \u0026gt;\u0026gt; this is an operator similar to the above: X \u0026gt;\u0026gt; Y will send the outputs of command X to Y; if Y exists, it this will append to the existing file.    Quick overview of package managers  Packages are collections of files that are bundled together and can be installed and removed as a group\nPackage managers allow you to:\n keep track of what software is installed easily install new software upgrade existing software to newer versions remove or uninstall software.  There are different package managers available for different Operating Systems and Distributions. Here are some examples:\n  MacOS: homebrew, AppStore\n  Windows: PackageManagement, Chocalatey...\n   Linux: yum, apt-get, zypper\n   Tasks for group work Work through the tasks with your partner/group. We recommend that one of you shares your screen and you discuss as a group how to proceed with each of the tasks. Each group member should be following along. It is totally fine if you don't complete all the tasks; make sure you understand how to do each task and ask questions if anything does not make sense! Complete any remaining tasks for homework.\n0. Open a terminal window Open a terminal window or Repl, where you can practice using the command line.\nOn Mac, you can do this by searching for \u0026quot;Terminal\u0026quot; in your Applications folder or using the keyboard shortcut \u0026quot;Command + Space\u0026quot; and then typing in \u0026quot;Terminal\u0026quot;.\nOn Windows, open Cmder if you installed this as part of the prerequisites, or if you installed the Linux subsystem for windows, you can run WSL or follow the instructions described in the video. Alternatively, you can use Cygwin or the gitbash shell to practice Linux commands, or if nothing is available or working on your machine, please use Repl for today.\nIf you are running into any challenges with this, reach out to one of the teachers.\n1. Move to the parent directory and back  Print your working directory Move into the parent directory, if there is one. Move back into the directory you came from.  Hint: if your original working directory path looked something like folder1/folder2/folder3, then for this task, you want to move to folder1/folder2 and then back to folder1/folder2/folder3.\n2. Create a redi folder Let's create a folder to store the work from this session.\n Navigate to the place where you would like this folder to be located. The current working directory is fine, but you can also navigate to your desktop or another folder where you keep course work. Create a new directory (folder) titled redi-2021-09-16 Move into this new directory and print your working directory. Double check that your working directory now includes redi-2021-09-16.  3. Create some files Now let's create some files to go in this new directory.\n  Create an empty file called \u0026quot;test1.txt\u0026quot; using the touch command.\n  Create a second file called \u0026quot;hello.txt\u0026quot; which contains the phrase: \u0026quot;hello, my name is YOUR_NAME_HERE!\u0026quot;. (Replace YOUR_NAME_HERE with your name :)) Hint: use the echo command and the \u0026gt; operator to do this.\n  List the files that are in the directory, and make sure that it looks something like:\n1test1.txt hello.txt   Append the line \u0026quot;How are you doing?\u0026quot; to the file \u0026quot;hello.txt\u0026quot;\n  Print the contents of the file and make sure that it looks something like:\n1hello! my name is YOUR_NAME_HERE! 2How are you doing?   4. Move these files into a new directory Let's organize the directory that we are in by putting some of the files in a new location.\n Create a folder (directory) called test-files in the redi-2021-09-16 folder List the contents of the directory that you are in and make sure that it looks something like: 1test1.txt hello.txt test-files  Move test1.txt into the test-files directory. List the contents of test-files and make sure it contains only test1.txt, and list the contents of redi-2021-09-16 to confirm that test1.txt has been moved.  5. Copy files and directories  Copy of hello.txt into the test-files directory. (Hint: this can be done in one command by copying the file to the proper location, or by creating a copy and then moving the file.) Rename the original hello.txt to original-hello.txt. (Hint: \u0026quot;renaming\u0026quot; is the same as moving a file to a new file path.) Make a copy of the test-files directory named test-files-copy. List the contents of test-files-copy and make sure that it contains both test1.txt and original-hello.txt.  6. Delete files and directories Be careful with this one! Please double check the command with one of the teachers before removing anything, since anything removed via rm cannot be retrieved!!\n In the test-files-copy, delete the test1.txt file. Confirm that test-files-copy contains only original-hello.txt. Delete the entire test-files-copy directory. List the contents of the redi-2021-09-16 directory and make sure that the test-files-copy directory is gone, but that the original test-files directory and other files are still present.  (Optional) 7. Additional Practice These are additional challenge tasks that are meant to be extra challenging, in case the previous tasks went by more quickly than expected! :)\n Use the man-pages and Google to understand how to use the grep command. Use this command to search for occurrences of the text \u0026quot;my name is\u0026quot; in the redi-2021-09-16 directory. (Hint: you can use the -r option to do this) Create a journal/diary as a group with the following structure: the journal folder should contain year folders on the first level. Within a year folder are month folders, which contain text files for each individual day. A file path for one of these may look like: .../journal/2021/09/16.txt. Create a few entries that have some text! Take a look at some of the extra resources :)  Extra resources  Linux Filesystem Hierarchy - Part 1 Linux Filesystem Hierarchy - Part 2 Briana's Bash Tutorial: How to Use the Command Line in Linux, Windows, and Mac A linux command line primer Learn Enough Command Line to Be Dangerous Linux command line basic cheat sheet The Linux Command Handbook Package Managers What is a package manager in Linux   Next class preparation Coming soon! Version Control with GIT\n","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/command/command_line_part2/","title":"16/September/2021 - Command Line Basics Part 2"},{"body":"1. Install Git üíæ First! Check if you already have git installed, open your command line and run:\n1git --version If you see something like the following output then you already have git installed:\n1git version 2.x.x Otherwise, here are instructions to install Git:\n For Windows For MacOS  2. Sign up to GitHub üöÄ Sign up here: https://github.com/join\nWhy?\n We will use it in the class to store our code It can be used to collaborate with others It can be used to showcase your work  3. Watch the first 8:07 minutes of this video üìΩÔ∏è This Git and GitHub Tutorial For Beginners by Amigoscode.\nWhat you will learn:\n An overview of why Git and Github are so useful  You can watch the rest if you want, but for the purpose of the class, the first eight minutes are sufficient.\n4. Read this üìö Read this Introduction to Version Control and Git by CodeBar.\nWhat you will learn:\n What is version control? Why do we use it? Overview of Git as a version control system Overview of GitHub as a place to store code Common terminology   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Review Learnings from Preparatory Materials 15 minutes video + article   Lesson Goals 5-10 minutes ‚ùå   Make a local repository and first commits 10-15 minutes git   Create a GitHub repository and push commits 10-15 minutes git and github   Class break 10 minutes ‚ùå   Make a branch and open a pull request 15-20 minutes git and github   Fork and clone a GitHub repository 10-15 minutes git and github   Wrap-up and next class overview 10-15 minutes ‚ùå    Lesson Goal Use Git and GitHub to make a profile README for your GitHub account.\n1. Create a local repository First, create a new directory and give it the same name as your GitHub username (the reason for this will become clear later):\n1mkdir \u0026lt;github-username\u0026gt; Move into that directory\n1cd \u0026lt;github-username\u0026gt; Initialise an empty git repository with the branch name, main:\n1git init 1git checkout -b main Now you have an empty local repository üéâ\n2. Make a commit Next, we want to make changes within this repository and save (or commit!) them.\nA commit is a way to save changes you‚Äôve made to a repository. It is powerful because it allows you to keep snapshots of your repository at any given time.\nFirst, we create a new file:\n1touch README.md This is a README file using markdown syntax.\nNext, we will add some text to this file to say hello to the world.\n1echo \u0026#34;# Hello, my name is \u0026lt;your name\u0026gt; :)\u0026#34; \u0026gt; README.md Then view the status of the current git repository:\n1git status The README.md file will appear in the untracked files. We want to track this file and add it to the staging area so it will be included in the next commit:\n1git add . Then check the status again.\nLet's commit this file with a helpful commit message:\n1git commit -m \u0026#34;Initialise repository with a README\u0026#34; Finally, we can take a look at the log, to view metadata about our previous commits:\n1git log 3. Create a remote repository (on GitHub) Sign in to GitHub: https://github.com\nOn the top navigation bar, click the + button and select ‚ÄòNew repository‚Äô\nCreate a new repository: Give the repository the same name as your username, make sure it is ‚ÄòPublic‚Äô then click ‚ÄòCreate repository‚Äô.\n4. Push the contents of your local repository to the remote Now we want to associate our local repository with the one we have created on GitHub and push the contents of our local repository to GitHub.\nConnect the local repository with the remote repository:\n1git remote add origin https://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git Verify that the remote was added:\n1git remote -v You should see the following output:\n1origin\thttps://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git (fetch) 2origin\thttps://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git (push) Finally push your changes to GitHub:\n1git push -u origin main Check your GitHub repository to see if it contains your README file, and look at your profile to see that it is displayed!\nWell done on sharing your first repository üéâ\n5. Create a branch Now we want to make some changes to our README, but we don't want to commit them to the main branch yet. Therefore, we will use another branch.\nCreate a new branch, called ‚Äòadd-more-detail‚Äô:\n1git checkout -b add-more-detail Open the README.md file in a text editor (e.g. Notepad or TextEdit) and make some changes. Here is a template you can use:\n1# Hello, my name is \u0026lt;your name\u0026gt; üëã 2 3Pronouns: \u0026lt;your pronouns\u0026gt; 4Learning: command line, Git, HTML, CSS, Javascript, Python 5Interests: \u0026lt;your interests\u0026gt; You can be as creative as you want by adding text, emoji, images or gifs (and more!).\nOnce you have made some changes it is time to add and commit them:\n1git add . 2git commit -m \u0026#34;Add some new information\u0026#34; Then push the branch with the changes to the remote repository:\n1git push origin add-more-detail Take a look at your README profile - has it been updated?\n6. Create a pull request Let's say we want to get feedback on the changes we've made. We can do this with a Pull Request.\nGo to GitHub and view your branch. Select 'Create new pull request'.\nAssign the person you are paired with to review your pull request.\nReviewing a pull request If somebody has requested your feedback, you can use this as an opportunity to:\n Ask questions and provide feedback about the changes Approve the changes Request further changes  Once you have reviewed the changes, click Review changes and then Approve.\nMerge a pull request Once your pull request has been reviewed, you can merge it so that the main branch is updated with your changes.\nOn your pull request, go to the bottom of the page and select Rebase and merge.\nYou can now go to your command line, checkout the main branch and pull the changes so that your local main branch is up to date:\n1git checkout main 2git pull origin main Finally, take a look at your updated GitHub profile README and celebrate what you've achieved!\n7. Fork and clone a repository Note üìù\nThis task is unrelated to the previous tasks, but has been included because these features are useful.\nA fork is a copy of someone else‚Äôs remote repository, sometimes you will make a fork to build on someone else's work.\nNavigate to https://github.com/octocat/Spoon-Knife\nOn the top-right, select 'Fork'.\nOnce you have forked the repository, we can clone it to download a copy of the repository to your local machine. On the repository, select Code and copy the HTTPS link. Then navigate to your terminal and run:\n1git clone https://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git 8. Follow-up activity: make improvements to your GitHub Profile README There are plenty of wonderful examples out there, take a look at the examples in this repository for inspiration: https://github.com/abhisheknaiidu/awesome-github-profile-readme\nGlossary    Term Meaning     repository (also known as repo) the place where code is stored.   commit a snapshot of changes made to a repository   branch a pointer to a commit   remote a repository that is hosted by a web service   origin the remote repository associated with a project   head the last commit in the checked-out branch   status the current state of the git repository   pull get the latest changes from the remote repository on your local repo   push push the latest changes from the local repository to the remote repo   pull request (also known as a PR) lets you get feedback on your code changes   staging area the intermediate area where a change is added before it is commit    Extra resources  Writing a good commit messages, by FreeCodeCamp Markdown cheatsheet Learning git branching, by pcottle Dangit, git, by @ksylor (available in multiple languages) Learn git concepts, not Commands, by Nico Riedmann A visual introduction to Git, by Ashley Keller   ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/git/git_and_github/","title":"21/September - Version Control with Git and GitHub"},{"body":"Prerequisites 1. Install VsCode Visual Studio Code is a freeware source-code editor made by Microsoft for Windows, Linux and macOS. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git. Wikipedia\nDuring this course, while working with HTML and Pything we might end up working with an code editor to make easier interacting with files and folder. An editor can be considered the notebook of a programmer. This, with the terminal, will be considered your main tools to reach your goals :D\nTo install VSCode please download it by clicking on the Download button of the next link -\u0026gt;\nVSCode\nYou can start playing with it if you want, during the class we will see how to work with it.\n2. Review exercises from Tuesday (21/September) Review the content from last class. Make sure that have completed the prerequisites from last class, including that your email is verified on GitHub. If you get stuck or feel confused about anything, no worries! Please write down any questions you have so that we can go over these in class.\nReview Previous Session: 21/September 3. Watch the Visual Studio Code basics  VS Basics   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Learning Markdown 20 minutes ‚ùå   Creating our own Journal in Github 60 minutes VSCode installed   Break 10 minutes    Working through git commands with our Journal 30 minutes VSCode installed    Lesson Goals  Know how to use an editor and move around What is a Markdown file  Learning Markdown Markdown is a way to write content for the web. It‚Äôs written in what people like to call ‚Äúplaintext‚Äù, which is exactly the sort of text you‚Äôre used to writing and seeing. Plaintext is just the regular alphabet, with a few familiar symbols, like asterisks ( * ) and backticks ( ` ).\nUnlike cumbersome word processing applications, text written in Markdown can be easily shared between computers, mobile phones, and people. It‚Äôs quickly becoming the writing standard for academics, scientists, writers, and many more. Websites like GitHub and reddit use Markdown to style their comments.\nTo get started with the tutorial let¬¥s jump here:\nMARKDOWN TUTORIAL\nCreating your own journal! 0. Command Line cheat sheet Remember that you can look up what a command does by using the man (manual-pages) command on Mac and Linux, or help command on Windows cmd. For example: man echo would give you information on what the echo command does and how to use it.     command what it does     echo print some text   pwd print working directory (print the path to where I currently am in the file system)   ls list the contents of the directory   cd change directory (this moves you, the viewer of the terminal, to a new location in the file system)   cat print the contents of the file   cp copy a file (note: to copy a directory you probably need to add an option (like -r) to copy a directory)   mv move a file or directory to a new location (note: this can also be useful for changing the name of a file/directory)   mkdir make a directory   touch create a new file   rm delete a file (note: to delete a directory, add the option -r or -d)   \u0026gt; the redirection operator (X \u0026gt; Y will send the outputs of command X to Y; if Y exists, it this will overwrite the existing file.)    0. Git cheat sheet These are some of the most famous commands you need.\nWhere you see \u0026lt;...\u0026gt;, you will have to replace the whole thing with the expected input. For example, git add  would become git add ./docs/\n   command what it does     git clone \u0026lt;repo\u0026gt; Clone repo located at  onto local machine. Original repo can be located on the local filesystem or on a remote machine via HTTP or SSH.   git config user.name \u0026lt;name\u0026gt; Define author name to be used for all commits in current repo. Devs commonly use --global flag to set config options for current user.   git add \u0026lt;directory\u0026gt; Stage all changes in  for the next commit. Replace  with a  to change a specific file.   git commit -m \u0026quot;\u0026lt;message\u0026gt;\u0026quot; Commit the staged snapshot, but instead of launching a text editor, use  as the commit message.   git status List which files are staged unstaged, and untracked.   git log Display the entire commit history using the default format. For customization see additional options.    0. Markdown Cheat Sheet    Element Markdown Syntax     Heading 1 # H1   Heading 2 ## H2   Heading 1 ### H3   Bold **bold text**   Italic *italicized text*   Blockquote \u0026gt; blockquote   Ordered List 1. First item 2. Second item 3. Third item   Unordered List - First item - Second item - Third item   Code `code`   Link [title](https://www.example.com)   Image ![alt text](image.jpg)    Additional Markdown commands\n1. Fork and clone your new Journal First, navigate to the directory where you want to clone the journal. (If you don't already have a designated folder for class materials, create a directory for this and navigate into it.) Cloning a repository means creating a local copy of another repository, usually one that is stored on a remote server like GitHub.\nFork this repository. In the top right corner, click Fork. You may be prompted with a question like \u0026quot;Where should we fork this repository to?\u0026quot; If so, click your GitHub username; this will create a copy of the repository to your account.\nYou should then be automatically taken to the main page of this repository.\nOn the upper right side, click Code (in green) and copy the SSH link. Then in your terminal run git clone \u0026lt;link-you-copied\u0026gt;. For example, this should look something like the following:\n1git clone git@github.com:ReDI-School/autumn-2021-intro-to-programming-md-journal.git Check that this directory now exists. (Hint: list the contents of the directory you are in, and make sure you see the cloned folder.)\nMove into that directory (small hint -\u0026gt; write cd autumn and then press the key TAB and it will autocomplete):\n1cd autumn-2021-intro-to-programming-md-journal Check the status of the git repository:\n1git status You should see output something like:\n1On branch main 2Your branch is up to date with \u0026#39;origin/main\u0026#39;. 3 4nothing to commit, working tree clean If so, great! You have successfully forked and cloned this repository. If not, check in with someone in your group or raise your hand so one of the teachers to help before moving on to the next steps.\n2. Checkout a new branch One of the great things about Git is being able to work on the same repository as others at the same time. A typical way of doing this when working on a project is by creating and checking out a new branch (via git checkout -b \u0026lt;branch-name\u0026gt;), making changes and committing your work, and pushing this work to your separate branch. Once you are ready to publish your changes to the main branch, you can create a pull request (PR) to have others review your changes and merge them to the main branch.\nEven though you are working on your own repository alone (since you forked, this is your own repository), let's practice creating a new branch so we can make some changes there and eventually merge this back to the main branch. Let's call this branch \u0026lt;your-github-username\u0026gt;/test-branch (leave out the \u0026lt;\u0026gt;, for example, for me, I would call the branch marcshaw/journal1):\n1git checkout -b \u0026lt;your-github-username\u0026gt;/test-branch Check the status of the repository again before moving on to the next step, and make sure that you are on the correct branch. (Hint: run git status which displays the branch you are on, and make sure this is what you expect.)\n3. Open with VSCode the folder you have just created Open VScode! :D once you are there let's click on file in the top left corner and click on Open.... Look for the the folder in your system you have just created (probably should be around /home) and click it.\nYour VSCode should show now on the left side the differents files and folders from the current scenario.\n4. Complete the tasks in the README.md file from the repository you have just created. In the README.md file from the repo you have just copied there is a section called ## TASKS. Go slowly one by one and complete them by marking them with a X\n5. Adding and committing some changes Once completed! let's make the world know about our recipes.\n  Check the status of the repository via git status. If you do not see something that says you deleted a file, please ask someone in your group or a teacher for help before moving on.\n  Stage the changes by running git add . or git add --all and check the status again to make sure the changes have shown up in your staging area. They should be green\n  Create a commit now to \u0026quot;save\u0026quot; your changes--in this case, the deleted file. Try to leave a helpful commit message like below, replacing  with the file you deleted:\n1git commit -m \u0026#34;Created my first journal!\u0026#34;   Check that the commit was successful by checking the status of the repository (git status) and checking the log (git log). You should see the commit message that you added at the top of the log, in addition to some previous commits from before you cloned the repository.\n  Let's go ahead and push these commits so far to the remote repository. Run the following, replacing \u0026lt;current-branch\u0026gt; with the branch you are working on (if you forget what it is called, you can run git status or git branch and copy the branch name from there!):\n  1git push origin \u0026lt;current-branch\u0026gt; 6. Create a pull request (PR) on GitHub As we did at the end of last class, let's create a pull request to merge this test-branch to main.\nGo to GitHub and view your branch: on the left side, there should be a button with main and a down arrow -- click this and select your branch. At the top, if there is an option to \u0026quot;Pull request\u0026quot;, click that, otherwise click on the \u0026quot;Pull request\u0026quot; tab and then \u0026quot;New pull request\u0026quot;.\nSince this is a forked branch, we are given the option of submitting a pull request against the original repository that we forked from (listed under base repository). This is often how you can contribute to open source projects -- by forking the repository, making your changes, and then submitting a PR against the original repo for the maintainers of the project to accept or reject.\nFor now, let's just PR within the fork, so change the base repository to be the forked repo. (The base repository and head repository should match, but the base branch should be main).\nAssign someone in your group to the PR 'it can be seen in the right section and approve and merge the changes into main.\n7. (Optional) Let¬¥s swap places Now it is time for your partner to repeat what you have done.\nBUT! instead of forking the repository we will clone directly your partner repository so both of you can contribute towards a shared journal.\nFor that let¬¥s do the following:\n Ask your partner for an URL pointing to his journal repository that both of you have created and existts in Github. Let¬¥s clone the repository (make sure the Pull Request opened is merged and that the main branch has the content you just created) Add some new files, folders, images and after add, commit and push your changes. You can go back to section 3 and repeat the same instructions  Extra resources  Git online VSCode Crash course VS Basics   VSCODE CHEATSHEET Install an extension Installing an extension\nCreating a new folder To create a folder we first need to click on the left sidebar the explorer icon. After that we click on the New Folder button and name it as we want.\nhttps://www.youtube.com/watch?v=fEp5nWvujhI\nCreating a new file To create a file we first need to click on the left sidebar the explorer icon. After that we click on the New File button and name it as we want.\nhttps://www.youtube.com/watch?v=2QBYlfSQA6s\nCopying a file Right click the file and click on copy or select it a Command/Control+c.\nTo paste it, we go over the folder where we want to paste it and we press Command/Control+c\nSearching for text Press Command/Control+f to search for something in the current opened file. To search in the whole folder click in the magnifying glass.\n","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/docs/git/ide/","title":"30/September - Using an IDE (Integrated development environment)"},{"body":"Welcome to Intro to Computer-Science Autumn 2021 course Berlin üá©üá™ Here you will find most of the content for our courses, prerequisites for each class, summaries of the classes and extra content so you can work on your own.\nGet started with the course üöÄ\n Margaret Hamilton - She sent rockets to the moon üöÄ\n  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science-fall-21/","title":"Berlin 2021 - Intro to Computer Science"}]